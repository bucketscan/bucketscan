name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Now we're using Yarn 4, we need to enable corepack to manage package installation
      - name: Enable Corepack
        shell: bash
        run: corepack enable

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21

      # TODO: Handle Yarn caching.
      # - name: Get pnpm store directory
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # - uses: actions/cache@v3
      #   name: Setup pnpm cache
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      - run: make install

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: "Supabase: apply migrations"
        shell: bash
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push

      - name: "Supabase: deploy functions"
        shell: bash
        run: supabase functions deploy --project-ref $SUPABASE_PROJECT_ID

      # Setup deployment dependencies
      - name: "Setup dependency: Terraform"
        uses: hashicorp/setup-Terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: "Setup dependency: Terragrunt"
        shell: bash
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.16/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Assume AWS deployment role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOY_ROLE_NAME }}
          aws-region: eu-west-2

      - name: Deploy to AWS
        shell: bash
        run: make deploy
